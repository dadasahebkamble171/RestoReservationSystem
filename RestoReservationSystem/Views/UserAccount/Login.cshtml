@model RestoReservationSystem.Models.login
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>login</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <link href="~/Content/css/web.css" rel="stylesheet" />
    <style>
        .loginBox {
            padding: 30px;
            margin-top: 200px;
            background-color: white;
        }
    </style>
</head>
<body>

    <!-- Model for login-signup -->
    @using (Html.BeginForm("Login", "UserAccount", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
    {
        <div class="modal-dialog modal-dialog-centered w-25 border-3 shadow rounded loginBox">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalToggleLabel"><b>LOG IN</b></h4>
                </div>
                <hr />
                <div class="modal-body">

                    <div class="input-group has-validation mb-3">
                        @*<span class="input-group-text" id="basic-addon1">@@</span>*@
                        @Html.EditorFor(model => model.EmailOrUsername, new { htmlAttributes = new { @class = "form-control mw-100", placeholder = "Email or Username", id = "validationCustomUsername", required = "required" } })
                        @*<input type="text" class="form-control mw-100" placeholder="Username" id="validationCustomUsername" aria-describedby="basic-addon1" required>*@
                        <div class="invalid-feedback">
                            Please enter email or username.
                        </div>
                    </div>
                    <div class="mb-3">
                        <!-- <label for="validationCustom04" class="form-label">State</label> -->
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control mw-100", type = "password", placeholder = "Password", id = "validationCustom04", required = "required" } })
                        @*<input type="password" class="form-control mw-100" id="validationCustom04" placeholder="Create Password" required>*@
                        <div class="invalid-feedback">
                            Please enter the password.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Who are you?</label>
                        @Html.DropDownListFor(model => model.Role,
                        new SelectList(new List<SelectListItem>
                        {
                        new SelectListItem { Value = "", Text = "Select your role" },
                        new SelectListItem { Value = "User", Text = "User" },
                        new SelectListItem { Value = "Admin", Text = "Admin" }
                        }, "Value", "Text"),
                        new { @class = "form-select mw-100", id = "r5", @required = "required" })
                        <div class="invalid-feedback">Please select your role</div>
                    </div>
                </div>
                <div>
                    <input class="btn btn-dark" type="submit" value="Log In" />
                </div>
                @if (TempData["insertMessage"] != null)
                {
                    <div class="alert alert-danger mt-2 mb-0" role="alert">
                        @Html.Raw(TempData["insertMessage"])
                    </div>
                }

                <hr />

                <div class="modal-footer">
                    @*<a class="btn btn-link" href="~/Views/Account/signup.cshtml">Don't have an account? Register Now</a>*@
                    @Html.ActionLink(
                    linkText: "Don't have an account? Register Now",
                    actionName: "emailVerification",
                    controllerName: "UserAccount",
                    routeValues: null,
                    htmlAttributes: new { @class = "btn btn-link" })
                </div>
            </div>
        </div>


        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (function () {
                'use strict'

                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.querySelectorAll('.needs-validation')

                // Loop over them and prevent submission
                Array.prototype.slice.call(forms)
                    .forEach(function (form) {
                        form.addEventListener('submit', function (event) {
                            if (!form.checkValidity()) {
                                event.preventDefault()
                                event.stopPropagation()
                            }

                            form.classList.add('was-validated')
                        }, false)
                    })
            })()
        </script>
    }
    </body>
</html>

